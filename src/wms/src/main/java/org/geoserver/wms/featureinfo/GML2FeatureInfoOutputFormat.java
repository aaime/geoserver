/* Copyright (c) 2001 - 2013 OpenPlans - www.openplans.org. All rights reserved.
 * This code is licensed under the GPL 2.0 license, available at the root
 * application directory.
 */
package org.geoserver.wms.featureinfo;

import java.io.IOException;
import java.io.OutputStream;

import net.opengis.wfs.FeatureCollectionType;

import org.geoserver.gml.GML2Writer;
import org.geoserver.platform.ServiceException;
import org.geoserver.wms.GetFeatureInfoRequest;
import org.geoserver.wms.WMS;

/**
 * A GetFeatureInfo response handler specialized in producing GML data for a GetFeatureInfo request.
 * 
 * <p>
 * This class does not deals directly with GML encoding. Instead, it works by taking the
 * FeatureResults produced in <code>execute()</code> and constructs a <code>GetFeaturesResult</code>
 * wich is passed to a <code>GML2FeatureResponseDelegate</code>, as if it where the result of a
 * GetFeature WFS request.
 * </p>
 * 
 * @author Gabriel Roldan
 */
public class GML2FeatureInfoOutputFormat extends GetFeatureInfoOutputFormat {
    /**
     * The MIME type of the format this response produces: <code>"application/vnd.ogc.gml"</code>
     */
    private static final String FORMAT = "application/vnd.ogc.gml";

    private WMS wms;

    /**
     * Default constructor, sets up the supported output format string.
     */
    public GML2FeatureInfoOutputFormat(final WMS wms) {
        super(FORMAT);
        this.wms = wms;
    }

    /**
     * Takes the <code>FeatureResult</code>s generated by the <code>execute</code> method in the
     * superclass and constructs a <code>GetFeaturesResult</code> wich is passed to a
     * <code>GML2FeatureResponseDelegate</code>.
     * 
     * @see AbstractFeatureInfoResponse#writeTo(OutputStream)
     */
    @SuppressWarnings({ "rawtypes", "unchecked" })
    @Override
    public void write(FeatureCollectionType results, GetFeatureInfoRequest fInfoReq,
            OutputStream out) throws ServiceException, IOException {
        
        if (results == null) {
            throw new IllegalStateException("It seems prepare() has not been called"
                    + " or has not succeed");
        }

        GML2Writer writer = new GML2Writer(wms.getGeoServer());
        writer.setIndent(true);
        writer.setFeatureBounding(true);
        writer.setGmlPrefixing(true);
        writer.setSrsPrefix("EPSG:");
        
        writer.write(results.getFeature(), fInfoReq.getBaseUrl(), out);
    }

}
